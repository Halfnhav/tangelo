// This is a script for PhantomJS to run.  It fetches a webpage and renders it
// either as HTML or as plain text, depending on the second parameter.

var system = require('system');
var fs = require("fs");
var page = require('webpage').create();

var cmake_binary_dir = "@CMAKE_BINARY_DIR@";
var cmake_source_dir = "@CMAKE_SOURCE_DIR@";

function Promise(callback) {
    return {
        then: function (deliver) {
            callback(deliver);
        }
    };
};

var url;
var status;
var statusText;

var image_file;
var image_data;
var threshold = 0.0;

var method;
var data;

var size = {
    width: 1024,
    height: 768
};

var suite_name = "";
var results = [];

function suite(cfg) {
    suite_name = cfg.name;
    url = cfg.url;
    if (cfg.image_file) {
        image_file = cfg.image_file
            .replace("${CMAKE_BINARY_DIR}", cmake_binary_dir)
            .replace("${CMAKE_SOURCE_DIR}", cmake_source_dir);
    }
    if (cfg.threshold) {
        threshold = cfg.threshold;
    }
    method = cfg.method;
    data = cfg.data;
    if (cfg.size) {
        size = cfg.size;
    }
    cfg.test_suite();
}

function test(name, test_func){
    results.push({
        name: name,
        runTest: test_func
    });
}

@TEST_SUITE@

console.log("url: " + url);
if (method) {
    console.log("method: " + method);
}
if (data) {
    console.log("data: " + JSON.stringify(data, null, 4));
}
if (image_file) {
    console.log("image file: " + image_file);
}
console.log("");

page.viewportSize = size;

// Route "console.log()" calls from within the Page context to the main Phantom
// context (i.e. current "this")
page.onConsoleMessage = function(msg) {
    console.log(msg);
};

// Capture the status code for the target url in this callback.  Look for a
// match in the "url" field and for "stage" to be "end" - this will distinguish
// the final status code for the url itself, from those for other requested
// resource within the page (images, etc.).
page.onResourceReceived = function (response) {
    if (response.url === url && response.stage === "end") {
        // Log the status code and message.
        status = response.status;
        statusText = response.statusText;

        if (status === "null") {
            console.log("error: received null status code from url " + url);
            phantom.exit(1);
        }

        // Unregister this callback.
        page.onResourceReceived = undefined;
    }
};

var runner = function() {
    var i,
        f,
        passed = 0,
        failed = 0,
        total,
        pending = 0,
        ready,
        pass;

    // If there is an image file, read it in as base64.
    if (image_file) {
        try {
            f = fs.open(image_file, "rb");
            image_data = window.btoa(f.read());
        } catch (e) {
            console.log("error reading " + image_file + ": " + e);
            phantom.exit(1);
        }
    }

    toImageData = function (png_data) {
        var img,
            c,
            ctx;

        return new Promise(function (resolve, reject) {
            img = new Image();
            img.onload = function () {
                c = document.createElement("canvas");
                ctx = c.getContext("2d");
                ctx.drawImage(img, 0, 0);

                resolve(ctx.getImageData(0, 0, img.width, img.height));
            };
            img.src = "data:image/png;base64," + png_data;
        });
    };

    compareImages = function (data1, data2, comparator) {
        return new Promise(function (deliver) {
            var promise1 = toImageData(data1),
                promise2 = toImageData(data2);

            promise1.then(function (png1) {
                promise2.then(function (png2) {
                    var diff,
                        val,
                        i;

                    if (comparator) {
                        deliver(comparator(png1, png2));
                    } else {
                        // If image dimensions do not match exactly, then reject
                        // the match.
                        if (png1.width !== png2.width || png1.height !== png2.height) {
                            console.log("image dimensions do not match");
                            deliver(false);
                        } else {
                            // Otherwise, compute the L2 difference between the
                            // images.
                            diff = 0.0;
                            for (i = 0; i < png1.data.length; i += 1) {
                                val = png1.data[i] - png2.data[i];
                                diff += val * val;
                            }

                            console.log("L2 diff: " + diff);
                            console.log("threshold: " + threshold);

                            deliver(Math.sqrt(diff) <= threshold);
                        }
                    }
                });
            });
        });
    }

    for (i = 0; i < results.length; i += 1) {
        console.log("Running test " + (i+1) + ": " + suite_name + " - " + results[i].name);
        pass = results[i].runTest(page);

        if (pass.then) {
            pending += 1;
            pass.then(function (result) {
                if (result) {
                    passed += 1;
                    console.log("PASSED\n");
                } else {
                    failed += 1;
                    console.log("FAILED\n");
                }

                pending -= 1;

                if (pending === 0) {
                    if (i === results.length) {
                        cleanup();
                    } else {
                        ready = true;
                    }
                }
            }, function () {
                console.log("error");
            });
        } else if (pass) {
            passed += 1;
            console.log("PASSED\n");
        } else {
            failed += 1;
            console.log("FAILED\n");
        }
    }

    if (ready) {
        cleanup();
    }

    function cleanup(){
        total = passed + failed;

        console.log("Of " + total + " test" + (total === 1 ? "" : "s") + " run, " + passed + " (" + (100 * passed / total) + "%) passed");

        phantom.exit(failed !== 0);
    }
};

if (method && data) {
    page.open(url, method, data, runner);
} else if (method) {
    page.open(url, method, runner);
} else {
    page.open(url, runner);
}
